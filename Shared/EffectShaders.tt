<#@ template language="C#v3.5" hostspecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
/* ****************************************************************************
 *
 * Copyright (c) Mårten Rånge.
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/


<#
   var effectCompilerPath = Host.ResolvePath(@"..\Output\WpfShaderEffects.DirectX.dll");
   var shaderSourcePath = Host.ResolvePath(@"ShaderSource");
   var shaderBinaryPath = Host.ResolvePath(@"ShaderBinary");
   
   var shaderFiles = Directory.GetFiles(shaderSourcePath, @"*.fx");
   
   var effectCompilerAssemblyBytes = File.ReadAllBytes(effectCompilerPath);

   var effectCompilerAssembly = Assembly.Load(effectCompilerAssemblyBytes);
   
   var effectCompilerType = effectCompilerAssembly.GetType("WpfShaderEffects.DirectX.EffectCompiler", true);
   
   var compilePixelShaderMethod = effectCompilerType.GetMethod("CompilePixelShader");
   
   
   Func<object, string, byte[]> CompilePixelShader = (instance, code) =>
      (byte[])compilePixelShaderMethod.Invoke(
            instance,
            new object[]
               {
                  code,
               });
   
   var matchParameter = new Regex(
      @"^(?<Type>\S+)\s+(?<Name>\S+)\s*\:\s*register\s*\(\s*(?<RegisterType>(S|C))(?<RegisterIndex>\d+)\s*\)\s*;\s*$",
      RegexOptions.Compiled | RegexOptions.CultureInvariant);
   
#>
// CompilerPath      :     <#=effectCompilerPath#>
// ShaderSourcePath  :     <#=shaderSourcePath#>
// ShaderBinaryPath  :     <#=shaderBinaryPath#>

using Color = System.Windows.Media.Color;
using Point = System.Windows.Point;

#if SILVERLIGHT
namespace SilverlightShaderEffects
#else
namespace WpfShaderEffects
#endif
{
   public abstract partial class BaseShaderEffect : System.Windows.Media.Effects.ShaderEffect
   {
      protected BaseShaderEffect(System.Windows.Media.Effects.PixelShader pixelShader)
      {
         PixelShader = pixelShader;
         UpdateShaderValue(InputProperty);
      }
      
      public static readonly System.Windows.DependencyProperty InputProperty =
         RegisterPixelShaderSamplerProperty(
            "Input", 
            typeof(BaseShaderEffect), 
            0);
            
      public System.Windows.Media.Brush Input
      {
         get 
         { 
            return (System.Windows.Media.Brush)GetValue(InputProperty); 
         }
         set 
         { 
            SetValue(InputProperty, value); 
         }
      }

      protected const double Pi = System.Math.PI;

      protected static Point MakePoint(double x, double y)
      {
         return new Point(x, y);
      }

      protected static Color MakeColor(byte r, byte g, byte b)
      {
         return MakeColor(0xFF, r, g, b);
      }

      protected static Color MakeColor(byte alpha, byte r, byte g, byte b)
      {
         return Color.FromArgb(alpha, r, g, b);
      }

      protected static double Clamp(double value, double min, double max)
      {
         return System.Math.Min(max, System.Math.Max(min, value));
      }
      
      protected static Point Clamp(Point value, Point min, Point max)
      {
         return new Point(
            Clamp(value.X, min.X, max.X),
            Clamp(value.Y, min.Y, max.Y));
      }
   }
   
<#
   using(var effectCompiler = (IDisposable)Activator.CreateInstance(effectCompilerType))
   foreach(var shaderFile in shaderFiles)
   {
      var shaderFileName = Path.GetFileName(shaderFile);
      var shaderName = Path.GetFileNameWithoutExtension(shaderFile) + "ShaderEffect";
      var shaderCompiledFileName = shaderBinaryPath + @"\" + shaderFileName + ".ps";
#>
   // Wrote to <#=shaderCompiledFileName#>
   
   /// <summary>
   /// <#=shaderName#> inherits System.Windows.Media.Effects.ShaderEffect
   /// This shader effect is based on the file: <#=shaderFileName#>
   /// </summary>
<#    
      var shaderContent = File.ReadAllText(shaderFile);  
      var shaderCompiled = CompilePixelShader(effectCompiler, shaderContent);
      File.WriteAllBytes(shaderCompiledFileName, shaderCompiled);
      
      var shaderLines = File.ReadAllLines(shaderFile);

      var parsedShaderLines = shaderLines
         .Select((line, lineNumber) => Support.ParseLine(lineNumber, line))
         .ToArray();
         
      var shaderParameters = parsedShaderLines
         .OfType<ParameterLine>()
         .ToLookup(pl => pl.RegisterType);
         
      var shaderContants = shaderParameters["C"].ToArray();
      var shaderSamplers = shaderParameters["S"].ToArray();

         
#>
   public sealed partial class <#=shaderName#> : BaseShaderEffect
   {
      readonly static System.Windows.Media.Effects.PixelShader s_pixelShader = 
         Common.Utility.CreatePixelShader<<#=shaderName#>>();
   
      public <#=shaderName#>()
         :  base(s_pixelShader)
      {
<#
      foreach(var shaderParameter in shaderContants)
      {
         var shaderParameterName       = shaderParameter.Name;
         var shaderParameterIndex      = shaderParameter.RegisterIndex;
         var descriptionLines          = Support.GetDescriptionLines(
            parsedShaderLines, 
            shaderParameter)
            .ToLookup(line => line.Type);
         var isDdxDdy                  = descriptionLines["DdxDdy"].FirstOrDefault() != null;            
         if (!isDdxDdy)
         {
#>
         UpdateShaderValue(<#=shaderParameter.Name#>Property);
<#
         }
         else
         {
#>
         DdxUvDdyUvRegisterIndex = <#=shaderParameterIndex#>;
<#
         }
         
      }
#>            
      }
   
<#
      foreach(var shaderParameter in shaderContants)
      {
         var shaderParameterName       = shaderParameter.Name;
         var shaderParameterHLSLType   = shaderParameter.Type;
         var shaderParameterType       = Support.MapType(shaderParameterHLSLType);
         var shaderParameterIndex      = shaderParameter.RegisterIndex;
         var defaultValue              = "default(" + shaderParameterType + ")";
         
         var descriptionLines          = Support.GetDescriptionLines(
            parsedShaderLines, 
            shaderParameter)
            .ToLookup(line => line.Type);

         var commentLines              = descriptionLines["Comment"];
         var typeLine                  = descriptionLines["Type"].FirstOrDefault();            
         var defaultValueLine          = descriptionLines["DefaultValue"].FirstOrDefault();            
         var coerceLine                = descriptionLines["Coerce"].FirstOrDefault();            
         var isDdxDdy                  = descriptionLines["DdxDdy"].FirstOrDefault() != null;            
         
         if (isDdxDdy)
         {
#>
      // Skipped parameter: <#=shaderParameterName#> as it's a DdxDdy register
<#
            continue;
         }
         
         if(defaultValueLine != null)
         {
            defaultValue = defaultValueLine.Input;
         }         

         if(typeLine != null)
         {
            shaderParameterType = Support.MapType(typeLine, shaderParameterHLSLType);
         }

#>
      // ----------------------------------------------------------------------
      // BEGIN_PROPERTY <#=shaderParameter.Name#>
      public static System.Windows.DependencyProperty <#=shaderParameterName#>Property = System.Windows.DependencyProperty.Register(
         @"<#=shaderParameterName#>",
         typeof(<#=shaderParameterType#>),
         typeof(<#=shaderName#>),
#if SILVERLIGHT
         new System.Windows.PropertyMetadata(
            <#=defaultValue#>,
            PixelShaderConstantCallback(<#=shaderParameterIndex#>))
#else
         new System.Windows.UIPropertyMetadata(
            <#=defaultValue#>,
            PixelShaderConstantCallback(<#=shaderParameterIndex#>),
            On<#=shaderParameterName#>CoerceValueStatic)
#endif
         );            

#if !SILVERLIGHT
      partial void On<#=shaderParameterName#>CoerceValue(
         <#=shaderParameterType#> baseValue,
         ref <#=shaderParameterType#> newValue,
         ref bool isProcessed
         );

      static object On<#=shaderParameterName#>CoerceValueStatic(
         System.Windows.DependencyObject instance, 
         object baseValue)
      {
         var inst = (<#=shaderName#>)instance;
         var <#=shaderParameterName#> = (<#=shaderParameterType#>)baseValue;
<#
      if (coerceLine != null)
      {
#>       
         // Coerce
         <#=shaderParameterName#> = <#=coerceLine.Input#>;
<#
      }
#>      
         if(inst != null)
         {
            var newValue = default(<#=shaderParameterType#>);
            var isProcessed = false;
            inst.On<#=shaderParameterName#>CoerceValue(
               <#=shaderParameterName#>,
               ref newValue,
               ref isProcessed);
            if (isProcessed)
            {
               return newValue;
            }
            else
            {
               return baseValue;
            }
         }
         else
         {
            return baseValue;
         }
      }
#endif
      /// <summary>
      /// Gets or sets property <#=shaderParameterName#> (<#=shaderParameterType#>)
<#    
      foreach(var commentLine in commentLines)
      {
#>
      /// <#=commentLine.Input#>
<#
      }
      if (coerceLine != null)
      {
#>
      /// Value coercion: <#=coerceLine.Input#>
<#
      }
#>      /// Default Value: <#=defaultValue#>
      /// </summary>
      public <#=shaderParameterType#> <#=shaderParameterName#>
      {
         get
         {
            return (<#=shaderParameterType#>)GetValue(<#=shaderParameterName#>Property);
         }
         set
         {
            SetValue(<#=shaderParameterName#>Property, value);
         }
      }

      // END_PROPERTY <#=shaderParameter.Name#>
      // ----------------------------------------------------------------------
      
<#
      }
#>   
   }
   
<#      
   }
#>   

}
<#+

   enum LineType
   {
      ParameterDescription,
      Parameter,
      NotUnderstood,
   }
   
   interface ILine
   {
      LineType LineType { get; }   
      string Line { get; }
      int LineNumber { get; }
   }

   abstract class BaseLine : ILine
   {
      public abstract LineType LineType { get; }
      
      public int LineNumber { get; set; }
      public string Line { get; set; }
      
      
      protected BaseLine(int lineNumber, string line)
      {
         LineNumber = lineNumber;
         Line = line;
      }
   }

   class NotUnderstoodLine : BaseLine
   {
      NotUnderstoodLine(int lineNumber, string line)
         :  base(lineNumber, line)
      {
      }
   
      public static ILine Create(int lineNumber, string line)
      {
         return new NotUnderstoodLine(lineNumber, line);
      }
   
      public override LineType LineType 
      { 
         get
         {
            return LineType.NotUnderstood;
         }
      }   
      
      public override string ToString()
      {
         return new 
         {
            LineType,
            LineNumber,
            Line,
         }.ToString();
      }
   }

   class ParameterLine : BaseLine
   {
      public readonly string Type;
      public readonly string Name;
      public readonly string RegisterType;
      public readonly string RegisterIndex;
   
   
      ParameterLine(int lineNumber, string line, Match m)
         :  base(lineNumber, line)
      {
         Type           = m.Groups["Type"].Value;
         Name           = m.Groups["Name"].Value;
         RegisterType   = m.Groups["RegisterType"].Value;
         RegisterIndex  = m.Groups["RegisterIndex"].Value;
      }
   
      public static ILine Create(int lineNumber, string line, Match m)
      {
         return new ParameterLine(lineNumber, line, m);
      }
   
      public override LineType LineType 
      { 
         get
         {
            return LineType.Parameter;
         }
      }   
      
      public override string ToString()
      {
         return new 
         {
            LineType,
            LineNumber,
            Line,
            Type,
            Name,
            RegisterType,
            RegisterIndex,
         }.ToString();
      }
   }

   class ParameterDescriptionLine : BaseLine
   {
      public readonly string Type;
      public readonly string Input;
   
      ParameterDescriptionLine(int lineNumber, string line, Match m)
         :  base(lineNumber, line)
      {
         Type           = m.Groups["Type"].Value;
         Input          = m.Groups["Input"].Value;
      }
   
      public static ILine Create(int lineNumber, string line, Match m)
      {
         return new ParameterDescriptionLine(lineNumber, line, m);
      }
   
      public override LineType LineType 
      { 
         get
         {
            return LineType.ParameterDescription;
         }
      }   
      
      public override string ToString()
      {
         return new 
         {
            LineType,
            LineNumber,
            Line,
            Type,
            Input,
         }.ToString();
      }
   }


   static class Support
   {
      static Regex s_matchParameter = new Regex(
         @"^(?<Type>\S+)\s+(?<Name>\S+)\s*\:\s*register\s*\(\s*(?<RegisterType>(S|C))(?<RegisterIndex>\d+)\s*\)\s*;\s*$",
         RegexOptions.Compiled | RegexOptions.CultureInvariant);
   
      static Regex s_matchParameterDescription = new Regex(
         @"^//\s*Parameter(?<Type>\S*)\s*\:\s*(?<Input>.*)$",
         RegexOptions.Compiled | RegexOptions.CultureInvariant);
   
      static ILine TryLine(
         Regex matcher, 
         Func<int, string, Match, ILine> lineCreator, 
         int lineNumber,
         string line)
      {
         var match = matcher.Match(line);
         if (match.Success)
         {
            return lineCreator(lineNumber, line, match);
         }
         else
         {
            return null;
         }
      }
   
      public static ILine ParseLine(
         int lineNumber,
         string line)
      {
         Func<Regex, Func<int, string, Match, ILine>, ILine> tryLine = (matcher, creator) => 
            TryLine(
               matcher, 
               creator, 
               lineNumber,
               line);
         return 
               tryLine(s_matchParameterDescription       , ParameterDescriptionLine.Create   )
            ?? tryLine(s_matchParameter                  , ParameterLine.Create              )
            ?? NotUnderstoodLine.Create(lineNumber, line);
         
      }
  
      public static IEnumerable<ParameterDescriptionLine> GetDescriptionLines(
         ILine[] lines,
         ParameterLine line)
      {
         var foundLines = lines
            .Take(line.LineNumber)
            .Reverse()
            .TakeWhile(ln => ln is ParameterDescriptionLine)
            .Cast<ParameterDescriptionLine>()
            .Reverse()
            .ToList();
         
         return foundLines;
      }
   
      static string[] MapToTypes(string type)
      {
         switch(type)
         {
            case "float":
               return new [] {"double"};
            case "float4":
               return new [] {"Color"};
            case "float2":
               return new [] {"Point"};
            default:
               throw new ArgumentException(
                  string.Format(
                     "type has illegal value: '{0}'", 
                     type));
         }
      }
      
      public static string MapType(string type)
      {
         return MapToTypes(type).First();
      }
   
      public static string MapType(ParameterDescriptionLine line, string type)
      {
         var types = MapToTypes(type);
         if(types.Contains(line.Input))
         {
            return line.Input;
         }
         else
         {
            throw new ArgumentException(
               string.Format(
                  "line, type has mismatched values: '{0}', {1}", 
                  line,
                  type));
         }
      }
   }
#>