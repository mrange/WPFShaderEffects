<#@ template language="C#v3.5" hostspecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
/* ****************************************************************************
 *
 * Copyright (c) Mårten Rånge.
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/


<#
   var effectCompilerPath = Host.ResolvePath(@"..\..\Output\WpfShaderEffects.DirectX.dll");
   var shaderSourcePath = Host.ResolvePath(@"ShaderSource");
   var shaderBinaryPath = Host.ResolvePath(@"ShaderBinary");
   
   var shaderFiles = Directory.GetFiles(shaderSourcePath, @"*.fx");
   
   var effectCompilerAssemblyBytes = File.ReadAllBytes(effectCompilerPath);

   var effectCompilerAssembly = Assembly.Load(effectCompilerAssemblyBytes);
   
   var effectCompilerType = effectCompilerAssembly.GetType("WpfShaderEffects.DirectX.EffectCompiler", true);
   
   var compilePixelShaderMethod = effectCompilerType.GetMethod("CompilePixelShader");
   
   
   Func<object, string, byte[]> CompilePixelShader = (instance, code) =>
      (byte[])compilePixelShaderMethod.Invoke(
            instance,
            new object[]
               {
                  code,
               });
   
   var matchParameter = new Regex(
      @"^(?<Type>\S+)\s+(?<Name>\S+)\s*\:\s*register\s*\(\s*(?<RegisterType>(S|C))(?<RegisterIndex>\d+)\s*\)\s*;\s*$",
      RegexOptions.Compiled | RegexOptions.CultureInvariant);
   
#>
namespace WpfShaderEffects.Normal
{
<#
   using(var effectCompiler = (IDisposable)Activator.CreateInstance(effectCompilerType))
   foreach(var shaderFile in shaderFiles)
   {
      var shaderFileName = Path.GetFileName(shaderFile);
      var shaderName = Path.GetFileNameWithoutExtension(shaderFile) + "ShaderEffect";
      var shaderCompiledFileName = shaderBinaryPath + @"\" + shaderFileName + ".ps";
#>
   // Wrote to <#=shaderCompiledFileName#>
   
   /// <summary>
   /// <#=shaderName#> inherits System.Windows.Media.Effects.ShaderEffect
   /// This shader effect is based on the file: <#=shaderFileName#>
   /// </summary>
<#    
      var shaderContent = File.ReadAllText(shaderFile);  
      var shaderCompiled = CompilePixelShader(effectCompiler, shaderContent);
      File.WriteAllBytes(shaderCompiledFileName, shaderCompiled);
      
      var shaderLines = File.ReadAllLines(shaderFile);
      var shaderParameters = shaderLines
         .Select(line => matchParameter.Match(line))
         .Where(match => match.Success)
         .ToLookup(match => match.Groups["RegisterType"].Value);
         
      var shaderContants = shaderParameters["C"].ToArray();
      var shaderSamplers = shaderParameters["S"].ToArray();

         
#>
   public sealed partial class <#=shaderName#> : System.Windows.Media.Effects.ShaderEffect
   {
      static System.Windows.Media.Effects.PixelShader s_pixelShader = 
         WpfShaderEffects.Common.Utility.CreatePixelShader<<#=shaderName#>>();
   
      public <#=shaderName#>()
      {
         PixelShader = s_pixelShader;    
         UpdateShaderValue(InputProperty);
<#
      foreach(var shaderParameter in shaderContants)
      {
#>
         UpdateShaderValue(<#=shaderParameter.Groups["Name"].Value#>Property);
<#
      }
#>            
      }
   
      public System.Windows.Media.Brush Input
      {
         get 
         { 
            return (System.Windows.Media.Brush)GetValue(InputProperty); 
         }
         set 
         { 
            SetValue(InputProperty, value); 
         }
      }

      public static readonly System.Windows.DependencyProperty InputProperty =
         RegisterPixelShaderSamplerProperty(
            "Input", 
            typeof(<#=shaderName#>), 
            0);
<#
      foreach(var shaderParameter in shaderContants)
      {
         var shaderParameterName       = shaderParameter.Groups["Name"].Value;
         var shaderParameterHLSLType   = shaderParameter.Groups["Type"].Value;
         var shaderParameterType       = Support.MapType(shaderParameterHLSLType);
         var shaderParameterIndex      = shaderParameter.Groups["RegisterIndex"].Value;
         var defaultValue              = "default(" + shaderParameterType + ")";
#>
      // ----------------------------------------------------------------------
      // BEGIN_PROPERTY <#=shaderParameter.Groups["Name"].Value#>
      public static System.Windows.DependencyProperty <#=shaderParameterName#>Property = System.Windows.DependencyProperty.Register(
         @"<#=shaderParameterName#>",
         typeof(<#=shaderParameterType#>),
         typeof(<#=shaderName#>),
         new System.Windows.PropertyMetadata(
            <#=defaultValue#>, 
            PixelShaderConstantCallback(<#=shaderParameterIndex#>),
            On<#=shaderParameterName#>CoerceValueStatic));

      partial void On<#=shaderParameterName#>CoerceValue(
         <#=shaderParameterType#> baseValue,
         ref <#=shaderParameterType#> newValue,
         ref bool isProcessed
         );

      static object On<#=shaderParameterName#>CoerceValueStatic(
         System.Windows.DependencyObject instance, 
         object baseValue)
      {
         var inst = (<#=shaderName#>)instance;
         if(inst != null)
         {
            var bv = (<#=shaderParameterType#>)baseValue;
            var newValue = default(<#=shaderParameterType#>);
            var isProcessed = false;
            inst.On<#=shaderParameterName#>CoerceValue(
               bv,
               ref newValue,
               ref isProcessed);
            if (isProcessed)
            {
               return newValue;
            }
            else
            {
               return baseValue;
            }
         }
         else
         {
            return baseValue;
         }
      }

      /// <summary>
      /// Gets or sets property <#=shaderParameterName#> (<#=shaderParameterType#>)
      /// </summary>
      public <#=shaderParameterType#> <#=shaderParameterName#>
      {
         get
         {
            return (<#=shaderParameterType#>)GetValue(<#=shaderParameterName#>Property);
         }
         set
         {
            SetValue(<#=shaderParameterName#>Property, value);
         }
      }

      // END_PROPERTY <#=shaderParameter.Groups["Name"].Value#>
      // ----------------------------------------------------------------------
      
<#
      }
#>   
   }
   
<#      
   }
#>   

}
<#+
   static class Support
   {
      public static string MapType(string type)
      {
         switch(type)
         {
            case "float":
               return "double";
            case "float4":
               return "System.Windows.Media.Color";
            case "float2":
               return "System.Windows.Point";
            default:
               throw new ArgumentException("type");                                             
         }
      }
   }
#>